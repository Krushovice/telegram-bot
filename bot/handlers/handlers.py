from telegram_bot.bot.main import bot, dp, types, db
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, Document
from aiogram.dispatcher.filters import Text, Command
from aiogram.types.message import ContentType
from telegram_bot.bot.config import PAYMENTS_TOKEN, item_url
from telegram_bot.bot.info import MESSAGES, STATEMENTS
from telegram_bot.bot.markups.Markups import main_Menu, Keyboard_inline, ReplyKeyboardRemove

PRICES = [LabeledPrice(label='–°–ø—Ä–∞–≤–∫–∞', amount = 1000000)]


@dp.message_handler(Command('buy'))
async def buy_process(message: Message):
    await bot.send_invoice(message.chat.id,
                          title=MESSAGES['tm_title'],
                          description=MESSAGES['tm_description'],
                          provider_token=PAYMENTS_TOKEN,
                          currency='rub',
                          photo_url=item_url,
                          photo_height=512,
                          photo_width=512,
                          photo_size=512,
                          need_email=True,
                          need_phone_number=True,
                          is_flexible=False,
                          prices=PRICES,
                          start_parameter='example',
                          payload='some_invoice'
                          )


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succesful_payment(message: Message):
    await bot.send_message(message.chat.id, f"""–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É 10000 —Ä—É–±–ª–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!üëèüèªüëèüèªüëèüèª
–í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤‚åõ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É –ø—Ä–∏–¥—ë—Ç –≥–æ—Ç–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞‚úÖ""")


@dp.message_handler(Command('start'))
async def start_menu(message: Message):
    if (not db.user_exists(message.from_user.id)):
        await bot.send_message(message.from_user.id,
                                f'''–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.full_name}.
                                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É''',
                                reply_markup=main_Menu)

        await message.bot.send_message(message.from_user.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}',
                                       reply_markup=main_Menu
                                       )


@dp.message_handler(content_types=types.ContentType.TEXT)
async def process_email(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email
    if "@" in message.text:
        email = message.text
        db.insert_user(
        message.from_user.id,
        message.from_user.full_name,
        message.from_user.username,
        email,
        broker
        )
        await message.answer("–°–ø–∞—Å–∏–±–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–π email.")
    else:
         # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ email. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")


@dp.message_handler(Text(equals=['user_btn', 'help_btn', 'join_btn']))
async def bottons(message: Message):
    await message.answer(message.text, reply_markup=ReplyKeyboardRemove())
    await message.delete()


@dp.message_handler(Text(equals=['üìï –ü–æ–º–æ—â—å', 'üÜï –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞', 'üíµ –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É']))
async def kb_answers(message: Message):
    if message.text == 'üìï –ü–æ–º–æ—â—å':
        await message.answer(MESSAGES['INFO'])
    elif message.text == 'üÜï –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞':
        await message.answer('–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /broker –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±—Ä–æ–∫–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ')
    elif message.text == 'üíµ –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É':
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–π–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º')


@dp.message_handler(Command('broker'))
async def broker_choice(message: Message):
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±—Ä–æ–∫–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=Keyboard_inline)


@dp.callback_query_handler(text=['bks', 'open', 'vtb', 'tnkf'])
async def broker_value(call: types.CallbackQuery):
    if call.data == 'bks':
        broker = '–ë–ö–° –ë—Ä–æ–∫–µ—Ä.'
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ë–ö–° –ë—Ä–æ–∫–µ—Ä. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy")
    if call.data == 'open':
        broker = '–û—Ç–∫—Ä—ã—Ç–∏–µ'
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –û—Ç–∫—Ä—ã—Ç–∏–µ. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy")
    if call.data == 'vtb':
        broker = '–í–¢–ë –ö–∞–ø–∏—Ç–∞–ª –§–æ—Ä–µ–∫—Å'
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –í–¢–ë –ö–∞–ø–∏—Ç–∞–ª –§–æ—Ä–µ–∫—Å.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy")
    if call.data == 'tnkf':
        broker = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy")
    if call.data == 'alfa':
        broker = '–ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy")
    if call.data == 'freadom':
        broker = '–§—Ä–∏–¥–æ–º –§–∏–Ω–∞–Ω—Å'
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –§—Ä–∏–¥–æ–º –§–∏–Ω–∞–Ω—Å.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy")
    if call.data == 'finam':
        broker = '–§–∏–Ω–∞–º'
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ –§–∏–Ω–∞–º.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy")
    if call.data == 'capital':
        broker = 'IT Capital'
        await call.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ IT Capital.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞, –∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy")
    db.insert_broker(call.from_user.id, broker)
    await call.answer()


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT)
async def handle_pdf(message: Message):
    if message.document.mime_type == 'application/pdf':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .pdf
        file_id = message.document.file_id
        file_unique_id = message.document.file_unique_id
        file_name = message.document.file_name

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ —Å –∏–º–µ–Ω–µ–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –ø–æ–ª–Ω–æ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_full_name = message.from_user.full_name
        file_path = f"{user_full_name}_{file_name}"
        await bot.download_file_by_id(file_id, file_path)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ —Å–ª–æ–≤–∞—Ä—å –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        STATEMENTS[user_full_name] = file_path
        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    else:
        # –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è pdf, —Å–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")





# @dp.message_handler()
# async def info_command(message: types.Message):
#     if message.text=='üìï–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
#         await bot.send_message(message.from_user.id,text=INFO)
#         await message.delete()
#     elif message.text=='üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
#         await bot.send_message(message.from_user.id,'üîô–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',reply_markup=nav.main_Menu)
#         await message.delete()
#     elif message.text=='üîõ–î—Ä—É–≥–æ–µ':
#         await bot.send_message(message.from_user.id,'üîõ–î—Ä—É–≥–æ–µ',reply_markup=nav.other_Menu)
#         await message.delete()
#     elif message.text=='üíµ–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É':
#         await bot.send_message(message.from_user.id,'üíµ–ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É')
#         await message.delete()
#     elif message.text=='üì©–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–ø–∏—Å–∫—É':
#         await bot.send_message(message.from_user.id,'üì©–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—ã–ø–∏—Å–∫—É')
#         await message.delete()

#     else:
#         await message.reply('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')
