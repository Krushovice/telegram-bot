import os
import json
import re

from aiogram import types
from main import bot, dp, db
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery, Document, ReplyKeyboardRemove
from aiogram.dispatcher.filters import Text, Command
from aiogram.types.message import ContentType
from config import PAYMENTS_TOKEN, item_url
from info import MESSAGES, STATEMENTS
from chat_bottons.Markups import main_Menu, Keyboard_inline

PRICES = [LabeledPrice(label='–°–ø—Ä–∞–≤–∫–∞', amount=1000000)]


@dp.message_handler(Command('start'))
async def start_menu(message: Message):
    await message.answer(MESSAGES['Hello'])
    if (not db.user_exists(message.from_user.id)):
        await bot.send_message(message.from_user.id,
                               f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É",
                               reply_markup=main_Menu
                               )
    else:
        await message.bot.send_message(message.from_user.id, f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}!',
                                       reply_markup=main_Menu
                                       )


@dp.message_handler(Command('help'))
async def help_user(message: Message):
    await message.answer(MESSAGES['Help'])


@dp.message_handler(Command('buy'))
async def buy_process(message: Message):
    await bot.send_invoice(message.chat.id,
                          title=MESSAGES['tm_title'],
                          description=MESSAGES['tm_description'],
                          provider_token=PAYMENTS_TOKEN,
                          currency='rub',
                          photo_url=item_url,
                          photo_height=512,
                          photo_width=512,
                          photo_size=512,
                          need_email=True,
                          need_phone_number=True,
                          is_flexible=False,
                          prices=PRICES,
                          start_parameter='example',
                          payload='some_invoice'
                           )


@dp.message_handler(Command('register'))
async def check_user(message: Message):
    if db.user_exists(message.from_user.id):
        await message.answer('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n'
                             '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø—Ä–∞–≤–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf\n'
                             '–∞ –∑–∞—Ç–µ–º –æ–ø–ª–∞—Ç–∏—Ç–µ —É—Å–ª—É–≥—É –ø–æ –∫–æ–º–∞–Ω–¥–µ /buy'
                             )
    else:
        await message.answer('–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è,\n'
                             '–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç —Å–≤–æ—é –ø–æ—á—Ç—É,\n'
                             '–∞ –∑–∞—Ç–µ–º –≤—ã–±—Ä–∞—Ç—å –±—Ä–æ–∫–µ—Ä–∞ /broker'
                             )


@dp.pre_checkout_query_handler(lambda query: True)
async def checkout_process(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def succesful_payment(message: Message):
    if message.successful_payment.total_amount == 1000000:
        await bot.send_message(message.chat.id,
                               """–ü–ª–∞—Ç–µ–∂ –Ω–∞ —Å—É–º–º—É 10000 —Ä—É–±–ª–µ–π –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!üëèüèªüëèüèªüëèüèª
                               –í —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤‚åõ –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É –ø—Ä–∏–¥—ë—Ç –≥–æ—Ç–æ–≤–∞—è —Å–ø—Ä–∞–≤–∫–∞‚úÖ""")
    else:
        await bot.send_message(message.chat_id,
                               """–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞,
                               –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!""")


@dp.message_handler(Text(equals=['user_btn', 'help_btn', 'join_btn']))
async def bottons(message: Message):
    await message.answer(message.text, reply_markup=ReplyKeyboardRemove())
    await message.delete()


@dp.message_handler(Text(equals=['üìï –ü–æ–º–æ—â—å', 'üÜï –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞', 'üíµ –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É', '@']))
async def kb_answers(message: Message):

    if "@" in message.text:
        email = message.text
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º email
        if not re.match(r"[^@]+@[^@]+\.[^@]+", email):
            await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email.")
            return

        user_id = message.from_user.id
        if db.user_exists(user_id):
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ email
            db.update_user_email(user_id, email)
            await message.answer("–¢–≤–æ–π email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.insert_user(
                user_id,
                message.from_user.full_name,
                message.from_user.username,
                email,
                broker=None
            )
            await message.answer("–°–ø–∞—Å–∏–±–æ! –Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª —Ç–≤–æ–π email.")

    elif message.text == 'üìï –ü–æ–º–æ—â—å':
        await message.answer(MESSAGES['Help'])

    elif message.text == 'üÜï –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞':
        await message.answer('–î–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /broker –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±—Ä–æ–∫–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ ')

    elif message.text == 'üíµ –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É':
        await message.answer('–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /buy –∏ —Å–ª–µ–¥—É–π—Ç–µ –¥–∞–π–ª—å–Ω–µ–π—à–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º')


@dp.message_handler(Command('broker'))
async def broker_choice(message: Message):
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ–≥–æ –±—Ä–æ–∫–µ—Ä–∞ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=Keyboard_inline)


@dp.callback_query_handler(text=['bks', 'open', 'vtb', 'tnkf', 'alfa', 'freedom', 'finam', 'capital'])
async def broker_value(call: types.CallbackQuery):
    if call.data == 'bks':
        broker = '–ë–ö–° –ë—Ä–æ–∫–µ—Ä.'
        message = (
               "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ë–ö–° –ë—Ä–æ–∫–µ—Ä. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n"
               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf,\n"
               "–∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
    elif call.data == 'open':
        broker = '–û—Ç–∫—Ä—ã—Ç–∏–µ'
        message = (
                "–í—ã –≤—ã–±—Ä–∞–ª–∏ –û—Ç–∫—Ä—ã—Ç–∏–µ.–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf,\n"
                "–∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
    elif call.data == 'vtb':
        broker = '–í–¢–ë –ö–∞–ø–∏—Ç–∞–ª –§–æ—Ä–µ–∫—Å'
        message = (
               "–í—ã –≤—ã–±—Ä–∞–ª–∏ –í–¢–ë –ö–∞–ø–∏—Ç–∞–ª –§–æ—Ä–µ–∫—Å.–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n"
               "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf,\n"
               "–∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
    elif call.data == 'tnkf':
        broker = '–¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
        message = (
              "–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–∏–Ω—å–∫–æ—Ñ—Ñ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n"
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf,\n"
              "–∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
    elif call.data == 'alfa':
        broker = '–ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏'
        message = (
              "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ê–ª—å—Ñ–∞ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏.–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n"
              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf,\n"
              "–∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
    elif call.data == 'freedom':
        broker = '–§—Ä–∏–¥–æ–º –§–∏–Ω–∞–Ω—Å'
        message = (
             "–í—ã –≤—ã–±—Ä–∞–ª–∏ –§—Ä–∏–¥–æ–º –§–∏–Ω–∞–Ω—Å.–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf,\n"
             "–∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
    elif call.data == 'finam':
        broker = '–§–∏–Ω–∞–º'
        message = (
             "–í—ã –≤—ã–±—Ä–∞–ª–∏ –§–∏–Ω–∞–º.–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf,\n"
             "–∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
    elif call.data == 'capital':
        broker = 'IT Capital'
        message = (
             "–í—ã –≤—ã–±—Ä–∞–ª–∏ IT Capital.–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!\n"
             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–ø–∏—Å–∫—É —Å –≤–∞—à–µ–≥–æ –±–∞–Ω–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ .pdf,\n"
             "–∞ –¥–∞–ª–µ–µ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /buy"
        )
    db.insert_broker(call.from_user.id, broker)
    await call.message.answer(message)


STATE_PATH = '../info.py'

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Ñ–∞–π–ª—ã –∏–∑ —Ñ–∞–π–ª–∞ info.py, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if os.path.isfile(STATE_PATH):
    with open(STATE_PATH, 'r') as f:
        STATEMENTS.update(json.load(f))
else:
    STATEMENTS = {}


@dp.message_handler(content_types=types.ContentTypes.DOCUMENT)
async def handle_pdf(message: Message):
    if message.document.mime_type == 'application/pdf':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–º–µ–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .pdf
        file_id = message.document.file_id
        file_name = message.document.file_name
        if message.document.file_unique_id in STATEMENTS:
            await message.answer("–í—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª.")
            return
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –Ω–∞ –¥–∏—Å–∫ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /home/krushovice/statements —Å –∏–º–µ–Ω–µ–º, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –ø–æ–ª–Ω–æ–º –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_full_name = message.from_user.full_name
        file_path = f"/home/krushovice/statements/{user_full_name}_{file_name}"
        await bot.download_file_by_id(file_id, file_path)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª –≤ —Å–ª–æ–≤–∞—Ä—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Ñ–∞–π–ª info.py
        STATEMENTS[message.from_user.id] = file_path
        with open(STATE_PATH, 'w') as f:
            json.dump(STATEMENTS, f)

        await message.answer("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")
    else:
        await message.answer("–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")


async def register_all_handlers(dp):
    dp.register_message_handler(start_menu, commands=['start'])
    dp.register_message_handler(buy_process, commands=['buy'])
    dp.register_message_handler(help_user, commands=['help'])
    dp.register_message_handler(check_user, Commands=['register'])
    dp.register_pre_checkout_query_handler(checkout_process)
    dp.register_message_handler(succesful_payment, content_types=types.ContentType.SUCCESSFUL_PAYMENT)
    dp.register_message_handler(bottons, Text(equals=['user_btn', 'help_btn', 'join_btn']))
    dp.register_message_handler(kb_answers, Text(equals=['üìï –ü–æ–º–æ—â—å', 'üÜï –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞', 'üíµ –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥—É']))
    dp.register_message_handler(broker_choice, commands=['broker'])
    dp.register_callback_query_handler(broker_value, text=['bks', 'open', 'vtb', 'tnkf', 'alfa', 'freadom', 'finam', 'capital'])
    dp.register_message_handler(handle_pdf, content_types=types.ContentTypes.DOCUMENT)
